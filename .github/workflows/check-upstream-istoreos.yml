#
# iStoreOS upstream version check workflow
#
# File: .github/workflows/check-upstream-istoreos.yml
# Description: Automatically check the new version of the iStoreOS upstream repository and trigger a build
# Author: CrueChan
# Creation time: 2025-06-26
#
# Licensed under the MIT License.
#

name: Check Upstream iStoreOS Branches

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  check:
    runs-on: ubuntu-22.04

    steps:
      - name: Fetch current LAST_BUILT_ISTOREOS_BRANCH
        id: get_current_branch
        run: |
          LAST_BUILT_BRANCH=$(gh variable get LAST_BUILT_ISTOREOS_BRANCH --repo ${{ github.repository }} || echo "istoreos-24.10.0")
          echo "current_branch=$LAST_BUILT_BRANCH" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch upstream iStoreOS branches
        id: fetch_branches
        run: |
          branches=$(git ls-remote --heads https://github.com/istoreos/istoreos.git | awk '{print $2}' | sed 's/refs\/heads\///')
          echo "Found branches: $branches"

          # Use Python script to filter and find the latest stable branch
          # The output of this script will be captured by the step and then used as step.outputs.latest_upstream_branch
          python_output=$(python3 - <<EOF_PYTHON_SCRIPT
          import re
          import sys

          branches = sys.stdin.read().splitlines()
          stable_branches = []
          # Match istoreos-XX.YY or istoreos-XX.YY.Z format
          version_pattern = re.compile(r'^istoreos-(\d{2})\.(\d{2})(?:\\.(\d+))?$')

          for branch in branches:
              match = version_pattern.match(branch)
              if match:
                  major = int(match.group(1))
                  minor = int(match.group(2))
                  patch = int(match.group(3)) if match.group(3) else 0
                  stable_branches.append((major, minor, patch, branch))

          stable_branches.sort()

          if stable_branches:
              latest_branch_tuple = stable_branches[-1]
              latest_branch_name = latest_branch_tuple[3]
              print(latest_branch_name) # Print only the branch name
          else:
              print("") # Print empty if no stable branches found
          EOF_PYTHON_SCRIPT
          )
          echo "latest_upstream_branch=$python_output" >> $GITHUB_OUTPUT

      - name: Compare versions and trigger build
        id: trigger_build
        if: steps.fetch_branches.outputs.latest_upstream_branch != ''
        run: |
          LATEST_UPSTREAM_BRANCH="${{ steps.fetch_branches.outputs.latest_upstream_branch }}"
          CURRENT_BUILT_BRANCH="${{ steps.get_current_branch.outputs.current_branch }}"

          echo "Latest upstream stable branch: $LATEST_UPSTREAM_BRANCH"
          echo "Currently built branch: $CURRENT_BUILT_BRANCH"

          # Capture the output of the Python comparison script
          NEW_VERSION_STATUS=$(python3 -c "
          import re
          import sys

          def parse_version(branch_name):
              match = re.match(r'^istoreos-(\d{2})\.(\d{2})(?:\\.(\d+))?$', branch_name)
              if match:
                  major = int(match.group(1))
                  minor = int(match.group(2))
                  patch = int(match.group(3)) if match.group(3) else 0
                  return (major, minor, patch)
              return (0, 0, 0)

          latest_version = parse_version(sys.argv[1])
          current_version = parse_version(sys.argv[2])

          if latest_version > current_version:
              print('NEW_VERSION_FOUND=true')
          else:
              print('NEW_VERSION_FOUND=false')
          " "$LATEST_UPSTREAM_BRANCH" "$CURRENT_BUILT_BRANCH")
          
          echo "$NEW_VERSION_STATUS" >> $GITHUB_OUTPUT

      - name: Dispatch build workflow if new version found
        if: steps.trigger_build.outputs.NEW_VERSION_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-istoreos.yml',
              ref: context.ref,
              inputs: {
                istoreos_branch: '${{ steps.fetch_branches.outputs.latest_upstream_branch }}'
              }
            });