#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: iStoreOS Builder

on:
  push:
    branches:
      - main # 当你的 main 分支有新的 push 时触发
  workflow_dispatch:
    inputs:
      istoreos_branch:
        description: '要编译的 iStoreOS 分支 (例如：istoreos-24.10.0)'
        required: false
        default: 'istoreos-24.10.0' # 默认值，如果你手动触发时没有指定分支，将使用此分支

# 为整个工作流设置权限，确保 GITHUB_TOKEN 有足够的权限
permissions:
  contents: write # 允许写入内容和创建release
  actions: write # 允许触发其他工作流
  repository-projects: write # 允许管理仓库项目和变量

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04 # 保持你之前修改的稳定版本

    steps:
    - name: Checkout # 检出你自己的仓库代码
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone iStoreOS source # 克隆 iStoreOS 源码到 /workdir/openwrt
      working-directory: /workdir
      run: |
        df -hT $PWD
        # 使用 workflow_dispatch 输入的分支，如果没有输入则使用默认值
        git clone https://github.com/istoreos/istoreos -b ${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }} openwrt
        # 创建符号链接，让后续脚本能找到源码
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf.default
        [ -e $DIY_P1_SH ] && chmod +x $DIY_P1_SH
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$DIY_P1_SH ] && $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && cp -r files openwrt/files
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        [ -e $DIY_P2_SH ] && chmod +x $DIY_P2_SH
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$DIY_P2_SH ] && $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        # 提取设备名称，用于命名 Artifact 和 Release
        if grep -q '^CONFIG_TARGET.*DEVICE.*=y' .config; then
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | head -1)
          echo "DEVICE_NAME=_${DEVICE_NAME}" >> $GITHUB_ENV
        else
          echo "DEVICE_NAME=" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize firmware files # 组织固件文件到易于上传的目录
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # 创建一个专门的固件输出目录
        mkdir -p ${{ github.workspace }}/firmware_output
        # 查找所有 img.gz, bin, manifest, buildinfo 文件并移动
        find openwrt/bin/targets/ -type f \( -name "*.img.gz" -o -name "*.bin" -o -name "*.manifest" -o -name "*.buildinfo" \) -exec mv {} ${{ github.workspace }}/firmware_output/ \;
        echo "FIRMWARE_PATH=${{ github.workspace }}/firmware_output" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to Artifacts # 上传固件到 Artifacts (推荐方式)
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: iStoreOS-Firmware-${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}/*

    - name: Update LAST_BUILT_ISTOREOS_BRANCH variable # 更新上次编译的分支变量
      if: success() # 仅在前面的步骤都成功时执行
      run: |
        # 使用 GitHub API 更新仓库变量
        BRANCH_NAME="${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}"
        
        # 尝试使用 GitHub CLI
        if gh variable set LAST_BUILT_ISTOREOS_BRANCH --body "$BRANCH_NAME" --repo "${{ github.repository }}"; then
          echo "Successfully updated variable using gh CLI"
        else
          echo "gh CLI failed, trying GitHub API directly"
          # 使用 GitHub API 直接更新变量
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables/LAST_BUILT_ISTOREOS_BRANCH" \
            -d "{\"name\":\"LAST_BUILT_ISTOREOS_BRANCH\",\"value\":\"$BRANCH_NAME\"}" \
          || echo "Failed to update variable - this might be the first time, trying to create it"
          
          # 如果变量不存在，尝试创建
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables" \
            -d "{\"name\":\"LAST_BUILT_ISTOREOS_BRANCH\",\"value\":\"$BRANCH_NAME\"}" \
          || echo "Variable operation completed (may have succeeded or failed)"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # 使用 iStoreOS 分支名作为 Release Tag 的一部分，更具描述性
        BRANCH_NAME="${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}"
        DEVICE_SUFFIX="${{ env.DEVICE_NAME }}"
        DATE_SUFFIX="${{ env.FILE_DATE }}"
        
        # 确保 tag 名称符合 Git 标签规范
        RELEASE_TAG="iStoreOS-${BRANCH_NAME}${DEVICE_SUFFIX}${DATE_SUFFIX}"
        
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        touch release.txt
        echo "Build triggered by: ${{ github.event_name }}" >> release.txt
        echo "iStoreOS Branch: ${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}" >> release.txt
        echo "Device: ${{ env.DEVICE_NAME }}" >> release.txt
        echo "Build Date: $(date)" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE_PATH }}/*
        fail_on_unmatched_files: false

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2 # 更新到最新稳定版本
      with:
        retain_days: 0
        keep_minimum_runs: 2
        # 删除所有状态的 runs，包括成功、失败等，以便节省空间
        delete_workflow_pattern: "iStoreOS Builder" # 指定只删除此工作流的运行记录

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3 # 使用更稳定的版本
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}