#
# Modified based on https://github.com/P3TERX/Actions-OpenWrt
# Original project Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
# Modified version maintained by CrueChan
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: iStoreOS Builder

on:
  workflow_dispatch:
    inputs:
      istoreos_branch:
        description: 'iStoreOS branch to compile (for example: istoreos-24.10.0)'
        required: false
        default: 'istoreos-24.10.0' # The default value, if you do not specify a branch when manually triggering, this branch will be used

# Set permissions for the entire workflow, making sure GITHUB_TOKEN has sufficient permissions
permissions:
  contents: write # Allows writing content and creating releases
  actions: write # Allows triggering of other workflows
  repository-projects: write # Allows management of repository items and variables

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  CLEANUP_OLD_RELEASES: true  # Set to false to disable cleanup
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04 # Keep the stable version of the previous modification

    steps:
    - name: Checkout # Check out my own repository code
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone iStoreOS source # Clone the iStoreOS source code to /workdir/openwrt
      working-directory: /workdir
      run: |
        df -hT $PWD
        # Use the branch from workflow_dispatch input, or the default value if no input is given
        git clone https://github.com/istoreos/istoreos -b ${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }} openwrt
        # Create a symbolic link so that subsequent scripts can find the source code
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf.default
        [ -e $DIY_P1_SH ] && chmod +x $DIY_P1_SH
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$DIY_P1_SH ] && $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && cp -r files openwrt/files
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        [ -e $DIY_P2_SH ] && chmod +x $DIY_P2_SH
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$DIY_P2_SH ] && $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        # Extract the device name for naming Artifact and Release
        if grep -q '^CONFIG_TARGET.*DEVICE.*=y' .config; then
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | head -1)
          echo "DEVICE_NAME=_${DEVICE_NAME}" >> $GITHUB_ENV
        else
          echo "DEVICE_NAME=" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize firmware files # Organize firmware files into directories for easy uploading
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # Create a dedicated firmware output directory
        mkdir -p ${{ github.workspace }}/firmware_output
        # Find all img.gz, bin, manifest, buildinfo files and move them
        find openwrt/bin/targets/ -type f \( -name "*.img.gz" -o -name "*.bin" -o -name "*.manifest" -o -name "*.buildinfo" \) -exec mv {} ${{ github.workspace }}/firmware_output/ \;
        echo "FIRMWARE_PATH=${{ github.workspace }}/firmware_output" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to Artifacts # Upload the firmware to Artifacts (recommended method)
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: iStoreOS-Firmware-${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}/*

    - name: Update LAST_BUILT_ISTOREOS_BRANCH variable # Update the branch variable of the last compilation
      if: success() # Execute only if all previous steps succeeded
      run: |
        # Updating repository variables using the GitHub API
        BRANCH_NAME="${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}"
        
        # Try using the GitHub CLI
        if gh variable set LAST_BUILT_ISTOREOS_BRANCH --body "$BRANCH_NAME" --repo "${{ github.repository }}"; then
          echo "Successfully updated variable using gh CLI"
        else
          echo "gh CLI failed, trying GitHub API directly"
          # Update variables directly using the GitHub API
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables/LAST_BUILT_ISTOREOS_BRANCH" \
            -d "{\"name\":\"LAST_BUILT_ISTOREOS_BRANCH\",\"value\":\"$BRANCH_NAME\"}" \
          || echo "Failed to update variable - this might be the first time, trying to create it"
          
          # If the variable does not exist, try to create it
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables" \
            -d "{\"name\":\"LAST_BUILT_ISTOREOS_BRANCH\",\"value\":\"$BRANCH_NAME\"}" \
          || echo "Variable operation completed (may have succeeded or failed)"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # Use the iStoreOS branch name as part of the Release Tag, which is more descriptive
        BRANCH_NAME="${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}"
        DEVICE_SUFFIX="${{ env.DEVICE_NAME }}"
        DATE_SUFFIX="${{ env.FILE_DATE }}"
        
        # Make sure the tag name complies with the Git tag specification
        RELEASE_TAG="iStoreOS-${BRANCH_NAME}${DEVICE_SUFFIX}${DATE_SUFFIX}"
        
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        touch release.txt
        echo "Build triggered by: ${{ github.event_name }}" >> release.txt
        echo "iStoreOS Branch: ${{ github.event.inputs.istoreos_branch || 'istoreos-24.10.0' }}" >> release.txt
        echo "Device: ${{ env.DEVICE_NAME }}" >> release.txt
        echo "Build Date: $(date)" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE_PATH }}/*
        fail_on_unmatched_files: false

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2 # Update to the latest stable version
      with:
        retain_days: 0
        keep_minimum_runs: 2
        # Delete runs of all states, including success, failure, etc., to save space
        delete_workflow_pattern: "iStoreOS Builder" # Specifies to delete only the running records of this workflow

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3 # Use a more stable version
      if: env.UPLOAD_RELEASE == 'true' && env.CLEANUP_OLD_RELEASES == 'true' && !cancelled()
      with:
        keep_latest: 100
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}